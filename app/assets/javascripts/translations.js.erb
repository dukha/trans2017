//translations.js
$().ready(function(){
  $("button.ok").click(function(){
    tr = $(this).parents('tr.dataodd', 'tr.dataeven');
  });
  
}); //ready

 /*
  * // added 0023a
 * This  sets up the selection mode radio buttons
 */
  //$( "input[name='selection_mode']" ).checkboxradio();

/*
 * This script sets up inplace editing
 */

  $().ready(function(){
    $('.best_in_place').best_in_place();
  });
   //This script is for overrides of the best in place functionality
  $().ready(function(){
    $(".ok").click(function(){
      return false;
    });
    
 }); // ready
 /*
  * Script that will pop up a view of hint
  */
 var cnt = 0;
 $().ready(function(){
 	cnt = 0;
	$("td.hint-available").click(function(){
		console.log("in click");
		console.log(this);
		
		//console.log($(this));
		nextTD = $(this).siblings("td.has-tooltip");
		if(nextTD ){
 		  html = $(nextTD).data("tooltip");
 	  }
 	 row = $(this).parent("tr");
 	
 	 if(cnt%2 == 0){
 	 	$(row).prepend("<td id = 'copy-hint' style='position: relative;border: 3px solid #73AD21;width:250px; height:250px;word-wrap:break-word; background-color: brown;' >" + html + "</td>");
        cnt = cnt + 1;
 	 }else{
 	 	//$("td#copy-hint").remove();
 	 	//cnt = cnt -1;
 	 }
 	 	
    });	//end click	
    $(document).keyup(function(e){
    	console.log("keyup" +e.keyCode.toString());
    	if(e.keyCode == 27){
    		console.log("esc");
    		$("td#copy-hint").remove();
    		if(cnt%2 ==1){
    			cnt = cnt - 1;
    		}
    	}
    }); 	
 	 	
 	  
 }); //end ready
/*
 * Script enlarges and restores editing index for translations
 */

  var maximiseSelector = 'img#maximise';
  var minimiseSelector = 'img#minimise'; 
  var headerDiv ='div#appheader';
  var appMenuSelector = 'td#appmenutd';
  var appMainSelector ='#appmaintd';
  var appMainContainerDivSelector = '#container';
  $().ready(function(){
    $(maximiseSelector).show();
    $(minimiseSelector).hide();
    
    $(maximiseSelector).click(function(){
      toggleHeaderMenu();
      toggleMaxMinImages();
    });
    
    $(minimiseSelector).click(function(){
      toggleHeaderMenu();
      toggleMaxMinImages();
    });
   
   
  });//ready 
  function toggleHeaderMenu(){
    $(headerDiv).toggle();
    $(appMenuSelector).toggle();
  };
  function toggleMaxMinImages(){
    $(maximiseSelector).toggle();
    $(minimiseSelector).toggle();
  };
  function toggleContainerPadding(){
    padding = $(appMainContainerDivSelector).css("padding");
    if(padding == '0'){
      $(appMainContainerDivSelector).css("padding", "20px 40px");
    } else{
      padding = '0';
    }
  };
  

 /* 
   *This script enables jquery ui sortable functionality for ul with id sortable
   */
  $(function() {
    $( sortableUlSelector ).sortable();
    $( sortableUlSelector ).disableSelection();
  });
  
  /*
   * returns an li for a ul. Used for the sortable array.order dot_key_code
   */
  var itemList = function(val, html){
      console.log("itemList");
      return $('<li/>', {class: "ui-state-default",
                         html: html, style: "margin: 3px; padding-left:3px;"}) ;
  };
  var specialAnchorSpan = "span.special-anchor";
  var pluralAnchorSpan = "span.plural-anchor";
  var bestInPlaceSpan = 'span.best_in_place';
  var anchorSelector = specialAnchorSpan + ", " + pluralAnchorSpan;// + ", " + bestInPlaceSpan;  
  var saveButtonSelector =   "input#ok-special-editor";
  var cancelButtonSelector = 'button#cancel-special-editor';
  var originalTranslationSelector = 'input#original-translation';
  //var idInputSelector = 'input#id';
  var dotKeyCodeInputSelector = 'input#dot_key_code';
  var sortableUlSelector = 'ul#sortable';
  
  var translationSelector = 'input#translation_translation'; 
  var allSortableUlsSelector = 'ul#sortable';
  var hintDivSelector ="div#special-editor-hints";
  var formSelector = "#edit_translation";
  var editorNameSelector = 'input#editor-name';//"input#editor";
  
  var englishTranslationSelector = 'input#english';
  var arrayEditingTableSelector = 'table#array-special-editor';
  var pluralEditingTableSelector =  'table#plural-editor'; 
  var containerSelector = 'td.editor-container'; 
/*
 * Sets each piece of data into a li inside the targetContainer after removing existing
 */    
  var setOrderData = function(targetContainer, array){
    if($(targetContainer).children().length != 0){
      targetContainer.empty();
    } 
    $.each(array,function(index ,text){
        console.log("setOrderData each");
        //$("ul#sortable").append(itemList('', value));
        $(targetContainer).append(itemList('', text));
    });
  };
  
  var setArrayData = function(targetContainer, array, englishTranslationArray, first_element_null){
    first_element_null = (englishTranslationArray[0] == null);
    if($(targetContainer).children().length != 0){
      targetContainer.empty();
    }
    //if(typeof englishTranslation !== "undefined"){ 
    html = '';
    row_style_for_null = "style='display:none;'";
    $.each(englishTranslationArray,function(index ,en_text){
      
      html = html + '<tr'+ ((first_element_null &&index == 0   )?(" " + row_style_for_null) : "")  + '><td>' + en_text +'</td><td>' + "<input class = 'array-element' type='text' value ='" + array[index] + "'/>" + '</td></tr>' ;
      
    });  
    //html = html + ""
    $(targetContainer).prepend(html);//.html();
    //}
  };  
 
  var closeOthers = function(event){
    result = $("button.ok, input#ok-special-editor").filter(":visible");
    $.each(result, function(index, value){
      td = $(value).closest(containerSelector);
      cancel($(td));
    });
    return true;
  };

  $().ready(function(){
    
    $('span.best_in_place').on('mousedown',closeOthers);
    $(specialAnchorSpan).on('mousedown',closeOthers); 
    $(pluralAnchorSpan).on('mousedown',closeOthers);
    $(allSortableUlsSelector).hide(200);//.css('display','none'); 
    $(anchorSelector).click(function(event){
       anchor = $(this);
       containerTd = anchor.closest(containerSelector);
       children = getTdChildren(containerTd);
       
       if(typeof children['editorName'] == 'undefined'){
         // do nothing
       }else if(children['editorName'] == 'array_order'){
         setOrderData(children['ul'], $.parseJSON(decodeURI(encodeURI(anchor.text()))));  
         children['ul'].css("display", "block");
       }else if(children['editorName'] == 'plural'){
           children['table'].show(200);//.css("display", 'table');
           console.log(children['table'].is(":visible"));
           console.log("end_plural");
       }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
         setArrayData(children['table'],$.parseJSON(decodeURI(encodeURI(anchor.text()))), children['englishTranslation'] );
         children['table'].show(200);//.css("display", 'table');    
       }else if(chidlren["editorName"] == 'bip'){
         console.log("bip");
       }else{
         console.log("unknown editor");  
       }
       anchor.hide(200);//.css("display", "none");
       children['form'].show(200);//.css("display", 'block');
       children['saveButton'].css("display", 'inline');
       children['cancelButton'].css("display", 'inline'); 
       children['hint'].css("display", 'inline'); 
       //if(children['editorName'] != undefined || 
       if( $('editorNameSelector').html() != '' ){
         //For non bip editors: bip already has this
         $(containerTd).find('input[type=text], textarea').keydown(function(e){  
            if(e.keyCode == 13 ){  
               $(children['saveButton']).click();
               return false;
             }  
          });//end keydown
       }; //end if
       
    }); //end anchor
    $(bestInPlaceSpan).click(function(){
      //console.log("in bip click");
      td = $(this).closest('td');
       okButton = $(td).find(".ok");
       $("<br/>").insertBefore(okButton);
    });
    /* Not called at present: Needs more testu=ing. To be called on save
     * Opens up the next editor down the page 
     */
    openNextRowEditor = function(objectSelector){
      nextTr = $(objectSelector).closest('tr.dataeven, tr.dataodd').next('tr.dataodd, tr.dataeven');
      $(nextTr.find(anchorSelector)).click();
    };
     
    $('.best_in_place').on("ajax:success", function (event, data, status, xhr) {
      
          showSuccess($(this).closest('tr').find('#local-flash'));
          
     }).on("ajax:error", function(e, xhr, status, error){
      //alert("ajax error from on button");
      showError($(this).closest('tr').find('#local-flash'), xhr.responseText);
    });
    
    
    $(saveButtonSelector).click(function(event){
      console.log("in save click");
      return save(event);
    });
    
    $(cancelButtonSelector).click(function(event){

      return cancel($(this).closest(containerSelector));
    });  

  }); //end ready
  
  function showSuccess(object){
      object.html('Sweet').css("background-color", 'palegreen');
      ttimer(object);
  }
  function showError(object, error){
    object.html(jQuery.trim(error).substring(0, 260)).css("background-color", 'pink'); 
    ttimer(object);
  }
  function ttimer(object){
    timeoutID = window.setTimeout(function(){object.empty();},15000);
  }
  /* This function is not called when bip is used
   *  This function does not actually save the data.
    That is done on the backend via a ruby ajax call. This only restores the screen and puts the data ready for the form
   */  
  var save = function(event){
    containerTd = parentTd(event);
    children = getTdChildren(containerTd);
    array = [];
    hash = {};
    object = null;
    if(typeof children['editorName'] == 'undefined'){
       // do nothing
    }else if(children['editorName'] == 'array_order'){ 
       lis = children['ul'].children('li') ;
       $.each(lis,function(index ,value){
         array.push(value.textContent);
       });
       object = array;
    }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
       inputs = children.table.find('input.array-element');
       $.each(inputs, function(index, input){
         array.push($(input).val());
       });
       object = array;   
    }else if(children['editorName'] == 'plural'){
       //hash = {};
       rows = children.table.find('tr');
       $.each(rows, function(index, value){
          tds = $(value).find('td');
          key = $(tds[0]).html();
          transObject = $(tds[1]).find('textarea');
          if(transObject.length == 0){
            // The input is not doen with a text field
            transObject = $(tds[1]).find('input');
          } 
          val = $(transObject).val();
          hash[key] = val;
       });
       object = hash;             
    }else{
      object = ''; 
    }
       
      update = JSON.stringify(object);
      children["translation"].val(update);
      children['anchor'].text(update) ;
      restoreTd(containerTd);
      setOriginalTranslation(update, containerTd); 
      //openNextRowEditor(containerTd);
      // Here we open up the next editor after the end of the click
     
       
      return true;
  };
  var cancel = function(containerTd){
    console.log("in cancel ");
    children = getTdChildren(containerTd);
    restoreTd(containerTd);
    if(typeof children['editorName'] == 'undefined'){
       // do nothing
    }else if(children['editorName'] == 'array_order'){
      setOrderData(children['ul'], $.parseJSON(decodeURI(encodeURI(children['originalTranslation'][0].value))));
    }else if(children['editorName'] == 'array' || children['editorName'] == 'array_first_element_null'){
       console.log(children['originalTranslation']);
       if($(children["table"]).children().length != 0){
         $(children["table"]).empty();
       }
    }else if(children['editorName'] == 'plural'){
      console.log(children['originalTranslation']);
      hash = JSON.parse(children['originalTranslation'].val());
       rows = children.table.find('tr');
       $.each(rows, function(index, value){
         tds = $(value).find('td');
         key = $(tds[0]).html();
         inputObject = $(tds[1]).find('textarea');
         if(! isDOM(inputObject)){
           inputObject = $(tds[1]).find('input');
         }
         $(inputObject).val(hash[key]);
      });
    }else{
      
    }
    return true;
  };
  
  var parentTd = function(event){
    return $(event.target).closest(containerSelector)[0];
  };
/*
 * This function hides and shows after editing but does not change data
 */  
  var restoreTd = function(td){
    console.log("in restor td");
    children = getTdChildren(td);
    children['anchor'].css("display", "inline");
    children['form'].hide(200);//.css("display", 'none');
    children['saveButton'].hide(200);//.css("display", 'none');
    children['cancelButton'].hide(200);//.css("display", 'none');
    children['hint'].hide(200);//.css("display", 'none');
    //console.log(typeof children['ul']);
    //console.log(typeof children['div']); 
    //console.log(typeof children['table']);    
    if(typeof children['ul'] != 'undefined'){
      children['ul'].hide(200);//.css("display", 'none');
    }else if(typeof children['table'] != 'undefined'){
      children['table'].hide(200);//.css("display", 'none');
      
    }else{
      
    }   
  };
/* on save this function sets the origninal translation to the new translation
 * 
 */
  var setOriginalTranslation = function( newTranslationJson, td){
    children = getTdChildren(td);
    children['originalTranslation'].val(newTranslationJson);
  };
  /*
   * @param td the cell in which the objects for a translation update are contained
   * @return a hash of the objects in the td, except for the editorName which is the string from the editorName object.
   * We need to return a string in the case of editorName because the value only appears as a defaultValue. 
   * Only the text of the editorName object is required. 
   */
  var getTdChildren = function(td){
    td = $(td);
    anchor = td.find(anchorSelector);
    form = td.find('form');
    //div = td.find(specialEditorDivSelector);
    
    saveButton = td.find(saveButtonSelector);
    cancelButton = td.find(cancelButtonSelector);
    originalTranslation = td.find(originalTranslationSelector);
    //id = td.find(idInputSelector);
    dotKeyCode = td.find(dotKeyCodeInputSelector);
    translation = td.find(translationSelector);
    hint = td.find(hintDivSelector);
    editorName = td.find(editorNameSelector)[0].defaultValue;
    
    //if(editorName != 'bip'){
      englishJson = td.find(englishTranslationSelector)[0].value;
      english = $.parseJSON(decodeURI(encodeURI(englishJson)));
    //}
    ul = undefined;
    div = undefined;
    table = undefined;
    
    if(editorName == 'array_order' ){
      ul = td.find(sortableUlSelector);
    }else if(editorName == 'array'){
      table = td.find(arrayEditingTableSelector); 
    }else if(editorName == 'array_first_element_null'){
      table = td.find(arrayEditingTableSelector);  
    }else if(editorName == 'decimal_format'){
         //Taken care of by best in place now
    }else if(editorName == 'time_format'){
         //Taken care of by best in place now         
    }else if(editorName == 'date_format'){ 
          //Taken care of by best in place now
    }else if(editorName == 'datetime_format'){
      
    }else if(editorName == 'plural'){
      table = td.find(pluralEditingTableSelector);
    }else{
      
    }    
    return {saveButton: saveButton, 
            cancelButton: cancelButton, 
            form: form, 
            ul: ul,
            div: div, 
            table: table,
            anchor: anchor, 
            //id: id, 
            dotKeyCode: dotKeyCode, 
            originalTranslation: originalTranslation, 
            translation: translation,
            hint: hint,
            editorName: editorName,
            englishTranslation: english };
  };
  
  function isDOM (obj) {
    // DOM, Level2
    if ("HTMLElement" in window) {
        return (obj && obj instanceof HTMLElement);
    }
    // Older browsers
    return !!(obj && typeof obj === "object" && obj.nodeType === 1 && obj.nodeName);
  }
  /*
   * This does not work
   
   $().ready(function(){
  	$("td.has-tooltip").tooltip(
    {
      disable: true,
      close: function(){
         $("td.has-tooltip").tooltip("disable");
      }
     });
	$("td.has-tooltip").click(function(){
	      $("td.has-tooltip").tooltip("enable").tooltip("open");
	});
  }):*/

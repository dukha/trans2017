<%= semantic_form_for(@calmapp_version) do |f| %>
  
	<%= f.inputs do %>
				   <%= f.input :calmapp_id, :as=>:select,:collection=> Calmapp.all.collect {|p| [ p.name, p.id ]}, :input_html => {:disabled=>true}      %>
				   <%= f.input :version  %>
				   <%= f.input :translators_redis_database_id, :wrapper_html=>{style: "display:none;"} %>
				   <%= f.input :production_redis_database_id, :wrapper_html=>{style: "display:none;"} %>
				   


        <!--div id="calmapp-versions-table" class='nested-fields' style='display:table' -->
        <!--p style="font-size:15px; font-weight:700;margin-left:0px;"><%=t($ARM + "translation_language", :count=>3)%></p -->
        <legend><span><%=t($ARM + "translation_language", :count=>3)%></span></legend>
        <!--div id="calmapp-versions-table" class='nested-fields' style='display:table; border:1px solid;border-color:grey; margin-left:20px;margin-right:1px margin-top:1px; margin-bottom:1px;padding-top:2px;padding-bottom:2px;width:80%;"}' -->
                <!--%= f.inputs do% -->
                      <!--%= f.input :version, label: false, required: false, input_html: {style: "margin-left:25%"}% -->
                      <!--%= f.input :version,  required: true,wrapper_html: {style: "margin-left:20px"}% -->
                      
                      <!--li id="translation-languages" style=" width:80%;" class="string input required"-->
     <!-- Table just for layout of 2 listboxes filters and buttons -->
        <li>
        <table id="translation-languages-table" class = 'dual-listboxes-layout' >
           <tr>
             <!--td class="dual-listboxes-main-label" ><label class='label' id="translation-languages-label">< %=t($ARA + 'calmapp_version.translation_languages')%></label></div -->
             <!--td ></td -->
             <td ><label><%=t($ARA + "calmapp_version.translation_languages_available")%></label></td> 
             <td> </td> 
             <td ><label><%=t($ARA + "calmapp_version.translation_languages_assigned")%></label></td>
           </tr>
           <tr>
               <!--td ></td -->
               <td ><input type="text" id="available-translation-languages-filter" class="dual-listboxes-available-filter" style="width:98%"/></td>
               <td style="width:10%" ></td>
               <td ><input type="text" id="assigned-translation-languages-filter" class="dual-listboxes-selected-filter" style="width:98%"/>
                 <select id="box1Storage-tl"></select>
               </td>
           </tr>
           <tr>

             <td   class="dual-listboxes-data">
               <%=  f.input :translation_languages_available, :label=>false, 
               :input_html =>{:id =>"available-translation-languages-box",:class => "dual-listboxes-available-data", :style=>"width:100%; height:100%;", :size=>'10'},  
               :as=>:select, :collection=>f.object.available_translation_languages.collect {|tl| [tl.name, tl.id ]},  :multiple=>"multiple" %>
             </td>
             
             <td style= "width:10%;"> 
                      <table style="margin-top:1px; padding-top:1px; margin-left:5%; ">
                        <tr style="text-align:center; ">
                          <td class="dual-listboxes-button-list" ><button id="to2-tl" type="button" class="toFrom" >&nbsp;>&nbsp;</button></td>
                        </tr> 
                        <!-- Move all buttons removed because we are only dealing with few moves.  -->
                        <tr>
                          <td class="dual-listboxes-button-list"><button id="allTo2-tl" type="button" class="toFrom">&nbsp;>>&nbsp;</button></td>
                        </tr>
                        <tr>
                        <td class="dual-listboxes-button-list"><button id="allTo1-tl" type="button" class="toFrom">&nbsp;<<&nbsp;</button></td>
                        </tr> 
                        <tr>
                          <td class="dual-listboxes-button-list"><button id="to1-tl" type="button" class="toFrom">&nbsp;<&nbsp;</button></td>
                        </tr>
                      </table>
             </td>
             <!--/div -->
             <td  class="dual-listboxes-data"><%=  f.input :calmapp_versions_translation_languages, :label=>false, :as=>:select, 
                 :collection=>f.object.translation_languages_not_en.collect {|tl| [tl.name,tl.id]}, :hint=>false, :multiple=>"multiple", 
                 :input_html => { :class => "dual-listboxes-selected-data", :id => "assigned-translation-languages-box", :size=>'10',:style=>"width:100%; height:100%;"   }  %>
               <select id="box2Storage-tl"></select>
             </td>
         </tr>                    
       </table>
       <p class="inline-hints"><%= t($FH + "calmapp_version.translation_languages") %></p>
        <%=f.semantic_errors :calmapp_versions_translation_languages%>
        </li>
        
       
	<% end %>	
	<%= f.actions do %>
      <%= f.action(:submit, :button_html=> {:id=>"submit-cav-form"})  %>    
  <% end %>
<% end %>

<script language="javascript" type="text/javascript">
        //<!-- This script sets up dual list boxes with the appropriate ids -->
        
        $(function() {
            $.configureBoxes({box1View : "available-translation-languages-box",
                              box2View : "assigned-translation-languages-box",
                              box1Filter : "available-translation-languages-filter",
                              box2Filter : "assigned-translation-languages-filter",
                              box1Clear : "available-translation-languages-filter-clear",
                              box2Clear : "assigned-translation-languages-filter-clear",
                              box1Counter : "available-translation-languages-counter",
                              box2Counter :  "assigned-translation-languages-counter",
                              box1Storage :   "box1Storage-tl",
                              box2Storage :   "box2Storage-tl",
                              to1 : "to1-tl",
                              to2 : "to2-tl",
                              allTo1 : "allTo1-tl",
                              allTo2 : "allTo2-tl"});
        });
        //This function is necessary to remove a blank that formtastic leaves in the first listbox.
        function deleteBlanksFromSelectBox(boxId){
           $(boxId + " :empty").remove();
        }
        
        /*
         * Begin getting and setting redis_db_index
         */ 
         
         /**
          * @param object is the div container for the fields to do with 1 redis database
          */
        /* var redisDbIndexSelector = function(object){calmapp_versions_translation_language
           return $(object).parent("li").siblings("li").find("#redis_db_index");
         }*/
            //$(this).parent("li").siblings("li").find("#redis_db_index");
         /**
          * getNextRedisDbIndex() uses and an ajax call to retrieve the next available index from server
          * @param redisInstanceId is the id of the redis instance
          */
         /*var getNextRedisDbIndex = function(redisDbIndexObject, redisInstanceId){
            var url = "< %= redis_databases_getnextindex_path %>";
            console.log(url);
            data = {redis_instance_id : redisInstanceId   };//{redis_instance_id : redisInstanceId};
            console.log(data);
            dbIndexObject = redisDbIndexObject;
            $.ajax( {
                       url:     url   ,
                       async : true,
                       type:       "GET", 
                       dataType:   "json",
                       data:       data,
                
                       success:    function(data, textStatus, xhr)   {
                                      console.log("pop success");
                                      unusedIndexArray = data
                                      console.log("data = " + data);
                                      console.log("success url " +url);
                                      $(dbIndexObject).val(data);
                                      /*unusedIndexArray.splice(0,0,'');
                                      $.each(unusedIndexArray, function( intIndex, objValue ){
                                 
                                        // Create a new option HTML element out of the
                                        // current value (in the iteration) and then
                                        // add this value to the list.
                                        //console.log("options " + objValue);
                                        $(RDB.Form.dbIndexSelectSelector).append($( "<option ></option>" ).val(objValue).html(objValue));
                                        //);
                                         //$(RDB.Form.dbIndexSelectSelector).addOption(objValue,objValue);
                                        }//end each function
                                      );//end each
                                      //We must be careful to set the index back to what it was if the user sets the same instance again
                                     //if($(RDB.Form.redisInstanceSelectSelector).val()==RDB.Form.instanceId){
                                           //$(RDB.Form.redisDatabaseIndex).val(RDB.Form.dbIndex);
                                           //disableDbIndex(true);
                                     //}else{
                                        //$(RDB.Form.dbIndexSelectSelector).val('');
         //}* /
                                    },
                      error:      function(request, status, error) {
                                     console.log("pop error");
                                    //This callback will handle errors on the server but not errors in the success callback
                                    //@todo put the reponse text in a web page
                                    alert(request.responseText);
                                  },
                     });//end ajax
          } ;*/
         
          /**
           * setRedisDbIndex() sets the in the form
           * @param dbIndex is the index to set
           */
          /*var setRedisDbIndex = function(dbIndexObject, dbIndexValue){
            //console.log(dbIndex);
            $(dbIndexObject).val(dbIndexValue)
          };
         */
         $(document).ready(function(){
          deleteBlanksFromSelectBox('#availableLanguagesBox');
          $("#submit-cav-form").click(function(event){
            //only selected options are sent to the controller. Thus select all in the assigned box
            $("#assigned-translation-languages-box > option").prop('selected', true) ;
            return true;
          });//end click
          
          /*$('#cavtd').bind('cocoon:before-insert', function(e, insertedItem) {
            //$("#owner_from_list").hide();
            //$("#owner a.add_fields").hide();
            
          }); //end bind / on
          /**
           * We bind the cocoon after insert event to the container div, so that on
           * selection of the redis instance, a new index will automatically be selected
           */
          //$('#cavtd').bind('cocoon:after-insert', function(e, insertedItem) {
         /* $(document).bind('cocoon:after-insert','#cavtd', function(e, insertedItem) {  
            console.log(insertedItem.find('select#redis_instance_id'));
            //var redisDbIndexInput = $(this).parent("li").siblings("li").find("#redis_db_index");//redisDbIndexSelector(this);
            //console.log(redisDbIndexInput);
            //console.log($(redisDbIndexInput));
            $(insertedItem.find('select#redis_instance_id')).change(function(e){
              var listItemSiblingsObjects = $(this).parent("li").siblings("li")
              var redisInstanceSelect = $(this);//$(listItemSiblingsObjects).find("#redis_instance_id");
              
              var redisDbIndexInput = $(listItemSiblingsObjects).find("#redis_db_index");//redisDbIndexSelector(this);
              
              //console.log($(this).children( "option:selected"));
              if( $(this).children( "option:selected").text() == ''){
                //redisDbIndexInput.val(''); 
                setRedisDbIndex(redisDbIndexInput, '');
              }else{
                //setRedisDbIndex(redisDbIndexInput, 100);
                getNextRedisDbIndex(redisDbIndexInput, $(redisInstanceSelect).val());
              }
            });
          }); //end bind/on
          */
         });//end ready

</script>